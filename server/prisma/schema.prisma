// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                   @id @default(autoincrement())
  firstName             String
  lastName              String
  email                 String                @unique
  password              String
  contactNo             String                @unique
  role                  String                @default("Client")
  isActive              Boolean               @default(true)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt

  pets                  Pet[]
  appointmentRequests   AppointmentRequest[]  @relation("UserAppointments")
  preferredAppointments AppointmentRequest[]  @relation("PreferredVet")
  assignedAppointments  AppointmentRequest[]  @relation("AssignedAppointments") 
  adminActions          AppointmentRequest[]  @relation("AdminActions")
  approvedAppointments  AppointmentRequest[]  @relation("ApprovedBy")
  declinedAppointments  AppointmentRequest[]  @relation("DeclinedBy")
  history               History[]             @relation("UserHistory")    
  notifications  Notification[]       
}

model Pet {
  id                   Int                   @id @default(autoincrement())
  name                 String
  type                 String
  breed                String?
  age                  Int?
  weight               Float?
  owner                User                  @relation(fields: [ownerId], references: [id])
  ownerId              Int
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  
  appointmentRequests  AppointmentRequest[] 
}

model AppointmentRequest {
  id                Int      @id @default(autoincrement())
  requestedAt       DateTime @default(now())
  appointmentDate   DateTime
  appointmentType   String
  preferredVetId    Int?
  preferredVet      User?    @relation("PreferredVet", fields: [preferredVetId], references: [id])
  assignedVetId     Int?
  assignedVet       User?    @relation("AssignedAppointments", fields: [assignedVetId], references: [id])
  petId             Int
  pet               Pet      @relation(fields: [petId], references: [id])
  ownerId           Int
  owner             User     @relation("UserAppointments", fields: [ownerId], references: [id])
  reason            String
  additionalComments String?
  status            String   @default("Pending")
  remark            String?
  rescheduleDate    DateTime?
  declinedAt        DateTime?
  declinedBy        Int?
  approvedAt        DateTime?
  approvedBy        Int?
  adminId           Int?
  admin             User?    @relation("AdminActions", fields: [adminId], references: [id])
  approvedByUser    User?    @relation("ApprovedBy", fields: [approvedBy], references: [id])
  declinedByUser    User?    @relation("DeclinedBy", fields: [declinedBy], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  history           History? @relation("AppointmentHistory")
}

model History {
  id                        Int      @id @default(autoincrement())
  appointmentRequestId      Int       @unique
  appointmentRequest        AppointmentRequest @relation("AppointmentHistory", fields: [appointmentRequestId], references: [id]) 
  dateAccomplished          DateTime @default(now())
  proceduresPerformed       String
  petConditionAfter         String
  recommendationsForOwner   String?  
  veterinariansNotes        String? 
  paymentDate               DateTime @default(now())
  ownerId                   Int
  owner                     User     @relation("UserHistory", fields: [ownerId], references: [id]) 
  paymentMethod             String
  amount                    Float
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

model PetGroomingVideo {
  id           Int      @id @default(autoincrement())
  videoUrl     String
  title        String
  description  String
  uploadedBy   String   
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id]) 
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model FAQ {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blacklist {
  id           Int      @id @default(autoincrement())
  token        String   @unique
  loggedOutAt  DateTime @default(now())
}
